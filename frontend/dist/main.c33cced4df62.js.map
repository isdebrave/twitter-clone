{"version":3,"file":"main.c33cced4df62.js","mappings":"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","sources":["webpack://twitter-clone/./src/App.tsx","webpack://twitter-clone/./src/redux/store.ts","webpack://twitter-clone/./src/index.tsx","webpack://twitter-clone/./src/redux/reducers/followList.ts","webpack://twitter-clone/./src/redux/reducers/me.ts","webpack://twitter-clone/./src/redux/reducers/notifications.ts","webpack://twitter-clone/./src/redux/reducers/post.ts","webpack://twitter-clone/./src/redux/reducers/posts.ts","webpack://twitter-clone/./src/redux/reducers/profile.ts"],"sourcesContent":["import React, { lazy } from \"react\";\r\n\r\nimport {\r\n  createBrowserRouter,\r\n  redirect,\r\n  RouterProvider,\r\n} from \"react-router-dom\";\r\n\r\nconst PrivateRoute = lazy(() => import(\"./utils/PrivateRoute\"));\r\nconst PublicRoute = lazy(() => import(\"./utils/PublicRoute\"));\r\n\r\nconst Root = lazy(() => import(\"./pages/Root\"));\r\nconst Auth = lazy(() => import(\"./pages/Auth\"));\r\nconst Home = lazy(() => import(\"./pages/Home\"));\r\nconst Explore = lazy(() => import(\"./pages/Explore\"));\r\nconst Notifications = lazy(() => import(\"./pages/Notifications\"));\r\nconst Profile = lazy(() => import(\"./pages/Profile\"));\r\nconst Feed = lazy(() => import(\"./pages/Feed\"));\r\nconst Carousel = lazy(() => import(\"./pages/Carousel\"));\r\nconst NotFound = lazy(() => import(\"./pages/NotFound\"));\r\n\r\nconst router = createBrowserRouter([\r\n  {\r\n    element: <Root />,\r\n    errorElement: <NotFound />,\r\n    children: [\r\n      {\r\n        element: <PrivateRoute />,\r\n        children: [\r\n          { path: \"/\", loader: () => redirect(\"/home\") },\r\n          { path: \"/home\", element: <Home /> },\r\n          { path: \"/explore\", element: <Explore /> },\r\n          { path: \"/notifications\", element: <Notifications /> },\r\n          { path: \"/:userId/status/:postId\", element: <Feed /> },\r\n          { path: \"/:userId/status/:postId/photo\", element: <Carousel /> },\r\n          { path: \"/:userId\", element: <Profile /> },\r\n        ],\r\n      },\r\n      {\r\n        element: <PublicRoute />,\r\n        children: [{ path: \"/auth\", element: <Auth /> }],\r\n      },\r\n    ],\r\n  },\r\n]);\r\n\r\nconst App = () => {\r\n  return <RouterProvider router={router} />;\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport me from \"./reducers/me\";\r\nimport followList from \"./reducers/followList\";\r\nimport posts from \"./reducers/posts\";\r\nimport notifications from \"./reducers/notifications\";\r\nimport profile from \"./reducers/profile\";\r\nimport post from \"./reducers/post\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    me,\r\n    followList,\r\n    posts,\r\n    notifications,\r\n    profile,\r\n    post,\r\n  },\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      immutableCheck: false,\r\n      serializableCheck: false,\r\n    }),\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport axios from \"axios\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { store } from \"./redux/store\";\r\n\r\naxios.defaults.baseURL = \"https://api.isdebrave-twitter-clone.shop\";\r\naxios.defaults.withCredentials = true;\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\")!);\r\nroot.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n);\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { ProfileState } from \"./profile\";\r\n\r\ntype UserState = Omit<ProfileState, \"posts\">;\r\n\r\nconst initialState: UserState[] = [];\r\n\r\nexport const followListSlice = createSlice({\r\n  name: \"followList\",\r\n  initialState,\r\n  reducers: {\r\n    onFollowList: (state, action) => {\r\n      return action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { onFollowList } = followListSlice.actions;\r\n\r\nexport default followListSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport interface MeState {\r\n  id: string;\r\n  username: string;\r\n  profileImage: string;\r\n  hasNotification: boolean;\r\n  followingIds: string[];\r\n}\r\n\r\nconst initialState: MeState = {\r\n  id: \"\",\r\n  username: \"\",\r\n  profileImage: \"\",\r\n  hasNotification: false,\r\n  followingIds: [],\r\n};\r\n\r\nexport const meSlice = createSlice({\r\n  name: \"me\",\r\n  initialState,\r\n  reducers: {\r\n    onMe: (state, action) => {\r\n      return action.payload;\r\n    },\r\n    onMeRemove: () => {\r\n      return initialState;\r\n    },\r\n    onMeProfileUpdate: (state, action) => {\r\n      const { profileImage } = action.payload;\r\n\r\n      state.profileImage = profileImage;\r\n    },\r\n    onMeFollowingAdd: (state, action) => {\r\n      const { followerId } = action.payload;\r\n\r\n      state.followingIds.push(followerId);\r\n    },\r\n    onMeFollowingDelete: (state, action) => {\r\n      const { followerId } = action.payload;\r\n\r\n      state.followingIds = state.followingIds.filter((id) => id !== followerId);\r\n    },\r\n    onMeAlertDelete: (state) => {\r\n      state.hasNotification = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  onMe,\r\n  onMeRemove,\r\n  onMeProfileUpdate,\r\n  onMeFollowingAdd,\r\n  onMeFollowingDelete,\r\n  onMeAlertDelete,\r\n} = meSlice.actions;\r\n\r\nexport default meSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\ninterface NotificationState {\r\n  id: string;\r\n  body: string;\r\n  createdAt: string;\r\n  userId: string;\r\n}\r\n\r\nconst initialState: NotificationState[] = [];\r\n\r\nexport const notificationsSlice = createSlice({\r\n  name: \"notifications\",\r\n  initialState,\r\n  reducers: {\r\n    onNotifications: (state, action) => {\r\n      return action.payload;\r\n    },\r\n    onNotificationDelete: (state, action) => {\r\n      return state.filter((notification) => notification.id !== action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { onNotifications, onNotificationDelete } =\r\n  notificationsSlice.actions;\r\n\r\nexport default notificationsSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { MeState } from \"./me\";\r\n\r\ntype PostUserState = Omit<MeState, \"hasNotification\" | \"followingIds\">;\r\n\r\nexport type PostCommentState = {\r\n  id: string;\r\n  body: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  userId: string;\r\n  postId: string;\r\n  user: PostUserState;\r\n};\r\n\r\nexport interface PostState {\r\n  id: string;\r\n  body: string;\r\n  images: string[];\r\n  views: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  userId: string;\r\n  likedIds: string[];\r\n  user: PostUserState;\r\n  comments: PostCommentState[];\r\n  totalCommentsCount: number;\r\n}\r\n\r\nconst initialState: PostState = {\r\n  id: \"\",\r\n  body: \"\",\r\n  images: [],\r\n  views: 0,\r\n  createdAt: \"\",\r\n  updatedAt: \"\",\r\n  userId: \"\",\r\n  likedIds: [],\r\n  user: {\r\n    id: \"\",\r\n    username: \"\",\r\n    profileImage: \"\",\r\n  },\r\n  comments: [],\r\n  totalCommentsCount: 0,\r\n};\r\n\r\nexport const postSlice = createSlice({\r\n  name: \"post\",\r\n  initialState,\r\n  reducers: {\r\n    onPost: (state, action) => {\r\n      return { ...action.payload, comments: [] };\r\n    },\r\n    onPostComments: (state, action) => {\r\n      state.comments.push(...action.payload);\r\n    },\r\n    onPostLiked: (state, action) => {\r\n      const { isExists, userId } = action.payload;\r\n\r\n      if (!isExists) {\r\n        state.likedIds.push(userId);\r\n      } else {\r\n        state.likedIds = state.likedIds.filter((id) => id !== userId);\r\n      }\r\n    },\r\n    onPostViews: (state) => {\r\n      state.views++;\r\n    },\r\n    onPostProfileUpdate: (state, action) => {\r\n      const { profileImage } = action.payload;\r\n\r\n      state.user.profileImage = profileImage;\r\n    },\r\n    onPostCommentAdd: (state, action) => {\r\n      const { options, data } = action.payload;\r\n\r\n      if (!data) {\r\n        state.comments.unshift(options);\r\n        state.totalCommentsCount++;\r\n      } else {\r\n        state.comments[0] = data;\r\n      }\r\n    },\r\n    onPostCommentDelete: (state, action) => {\r\n      const { commentId } = action.payload;\r\n\r\n      state.comments = state.comments.filter(\r\n        (comment) => comment.id !== commentId\r\n      );\r\n      state.totalCommentsCount--;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  onPost,\r\n  onPostComments,\r\n  onPostLiked,\r\n  onPostViews,\r\n  onPostProfileUpdate,\r\n  onPostCommentAdd,\r\n  onPostCommentDelete,\r\n} = postSlice.actions;\r\n\r\nexport default postSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { PostState } from \"./post\";\r\n\r\nconst initialState: PostState[] = [];\r\n\r\nexport const postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {\r\n    onPosts: (state, action) => {\r\n      return [...state, ...action.payload];\r\n    },\r\n    onPostsAdd: (state, action) => {\r\n      const { options, data } = action.payload;\r\n\r\n      if (!data) {\r\n        state.unshift(options);\r\n      } else {\r\n        state[0] = data;\r\n      }\r\n    },\r\n    onPostsLiked: (state, action) => {\r\n      const { isExists, userId, postId } = action.payload;\r\n\r\n      const post = state.find((post) => post.id === postId);\r\n      if (!post) return;\r\n\r\n      if (!isExists) {\r\n        post.likedIds.push(userId);\r\n      } else {\r\n        post.likedIds = post.likedIds.filter((id) => id !== userId);\r\n      }\r\n    },\r\n    onPostsProfileUpdate: (state, action) => {\r\n      const { profileImage, userId } = action.payload;\r\n\r\n      for (const post of state) {\r\n        if (post.user.id === userId) {\r\n          post.user.profileImage = profileImage;\r\n        }\r\n      }\r\n    },\r\n    onPostsDelete: (state, action) => {\r\n      const { postId } = action.payload;\r\n\r\n      return state.filter((post) => post.id !== postId);\r\n    },\r\n    onPostsCommentAdd: (state, action) => {\r\n      const { options, data } = action.payload;\r\n\r\n      if (!data) {\r\n        const { postId } = options;\r\n\r\n        const post = state.find((post) => post.id === postId);\r\n\r\n        if (!post) return;\r\n\r\n        post.comments.unshift(options);\r\n        post.totalCommentsCount++;\r\n      } else {\r\n        const { postId } = data;\r\n\r\n        const post = state.find((post) => post.id === postId);\r\n\r\n        if (!post) return;\r\n\r\n        post.comments[0] = data;\r\n      }\r\n    },\r\n    onPostsCommentDelete: (state, action) => {\r\n      const { postId, commentId } = action.payload;\r\n\r\n      const post = state.find((post) => post.id === postId);\r\n\r\n      if (!post) return;\r\n\r\n      post.comments = post.comments.filter(\r\n        (comment) => comment.id !== commentId\r\n      );\r\n      post.totalCommentsCount--;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  onPosts,\r\n  onPostsAdd,\r\n  onPostsLiked,\r\n  onPostsProfileUpdate,\r\n  onPostsDelete,\r\n  onPostsCommentAdd,\r\n  onPostsCommentDelete,\r\n} = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { PostState } from \"./post\";\r\n\r\nexport interface ProfileState {\r\n  id: string;\r\n  username: string;\r\n  bio: string;\r\n  coverImage: string;\r\n  profileImage: string;\r\n  hasNotification: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  followingIds: string[];\r\n  followerIds: string[];\r\n  posts: PostState[];\r\n  totalPostsCount: number;\r\n}\r\n\r\nconst initialState: ProfileState = {\r\n  id: \"\",\r\n  username: \"\",\r\n  bio: \"\",\r\n  coverImage: \"\",\r\n  profileImage: \"\",\r\n  hasNotification: false,\r\n  createdAt: \"\",\r\n  updatedAt: \"\",\r\n  followingIds: [],\r\n  followerIds: [],\r\n  posts: [],\r\n  totalPostsCount: 0,\r\n};\r\n\r\nexport const profileSlice = createSlice({\r\n  name: \"profile\",\r\n  initialState,\r\n  reducers: {\r\n    onProfile: (state, action) => {\r\n      return { ...action.payload, posts: [] };\r\n    },\r\n    onProfilePosts: (state, action) => {\r\n      state.posts.push(...action.payload);\r\n    },\r\n    onProfileRemove: () => {\r\n      return initialState;\r\n    },\r\n    onProfilePostsLiked: (state, action) => {\r\n      const { isExists, userId, postId } = action.payload;\r\n\r\n      const post = state.posts.find((post) => post.id === postId);\r\n      if (!post) return;\r\n\r\n      if (!isExists) {\r\n        post.likedIds.push(userId);\r\n      } else {\r\n        post.likedIds = post.likedIds.filter((id) => id !== userId);\r\n      }\r\n    },\r\n    onProfilePostsAdd: (state, action) => {\r\n      const { options, data } = action.payload;\r\n\r\n      if (!data) {\r\n        state.posts.unshift(options);\r\n        state.totalPostsCount++;\r\n      } else {\r\n        state.posts[0] = data;\r\n      }\r\n    },\r\n    onProfilePostsDelete: (state, action) => {\r\n      const { postId } = action.payload;\r\n\r\n      state.posts = state.posts.filter((post) => post.id !== postId);\r\n      state.totalPostsCount--;\r\n    },\r\n    onProfileUpdate: (state, action) => {\r\n      const { coverImage, profileImage, username, bio } = action.payload;\r\n\r\n      state.coverImage = coverImage || state.coverImage;\r\n      state.profileImage = profileImage || state.profileImage;\r\n      state.username = username;\r\n      state.bio = bio;\r\n\r\n      if (profileImage) {\r\n        state.posts.forEach((post) => (post.user.profileImage = profileImage));\r\n      }\r\n    },\r\n    onProfileFollowAdd: (state, action) => {\r\n      const { meId, followerId, profileId } = action.payload;\r\n\r\n      if (profileId === meId) {\r\n        state.followingIds.push(followerId);\r\n      }\r\n\r\n      if (profileId === followerId) {\r\n        state.followerIds.push(meId);\r\n      }\r\n    },\r\n    onProfileFollowDelete: (state, action) => {\r\n      const { meId, followerId, profileId } = action.payload;\r\n\r\n      if (profileId === meId) {\r\n        state.followingIds = state.followingIds.filter(\r\n          (id) => id !== followerId\r\n        );\r\n      }\r\n\r\n      if (profileId === followerId) {\r\n        state.followerIds = state.followerIds.filter((id) => id !== meId);\r\n      }\r\n    },\r\n    onProfilePostsCommentAdd: (state, action) => {\r\n      const { options, data } = action.payload;\r\n\r\n      if (!data) {\r\n        const { postId } = options;\r\n\r\n        const post = state.posts.find((post) => post.id === postId);\r\n\r\n        if (!post) return;\r\n\r\n        post.comments.unshift(options);\r\n        post.totalCommentsCount++;\r\n      } else {\r\n        const { postId } = data;\r\n\r\n        const post = state.posts.find((post) => post.id === postId);\r\n\r\n        if (!post) return;\r\n\r\n        post.comments[0] = data;\r\n      }\r\n    },\r\n    onProfilePostsCommentDelete: (state, action) => {\r\n      const { postId, commentId } = action.payload;\r\n\r\n      const post = state.posts.find((post) => post.id === postId);\r\n\r\n      if (!post) return;\r\n\r\n      post.comments = post.comments.filter(\r\n        (comment) => comment.id !== commentId\r\n      );\r\n      post.totalCommentsCount--;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  onProfile,\r\n  onProfilePosts,\r\n  onProfileRemove,\r\n  onProfilePostsLiked,\r\n  onProfilePostsAdd,\r\n  onProfilePostsDelete,\r\n  onProfileUpdate,\r\n  onProfileFollowAdd,\r\n  onProfileFollowDelete,\r\n  onProfilePostsCommentAdd,\r\n  onProfilePostsCommentDelete,\r\n} = profileSlice.actions;\r\n\r\nexport default profileSlice.reducer;\r\n"],"names":["PrivateRoute","lazy","PublicRoute","Root","Auth","Home","Explore","Notifications","Profile","Feed","Carousel","NotFound","router","createBrowserRouter","element","React","errorElement","children","path","loader","redirect","RouterProvider","store","configureStore","reducer","me","followList","posts","notifications","profile","post","devTools","process","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","axios","defaults","baseURL","withCredentials","ReactDOM","document","getElementById","render","Provider","App","followListSlice","createSlice","name","initialState","reducers","onFollowList","state","action","payload","actions","id","username","profileImage","hasNotification","followingIds","meSlice","onMe","onMeRemove","onMeProfileUpdate","onMeFollowingAdd","followerId","push","onMeFollowingDelete","filter","onMeAlertDelete","_a","notificationsSlice","onNotifications","onNotificationDelete","notification","postSlice","body","images","views","createdAt","updatedAt","userId","likedIds","user","comments","totalCommentsCount","onPost","__assign","onPostComments","apply","onPostLiked","isExists","onPostViews","onPostProfileUpdate","onPostCommentAdd","options","data","unshift","onPostCommentDelete","commentId","comment","postsSlice","onPosts","__spreadArray","onPostsAdd","onPostsLiked","postId","find","onPostsProfileUpdate","_i","state_1","length","onPostsDelete","onPostsCommentAdd","postId_2","postId_1","onPostsCommentDelete","bio","coverImage","followerIds","totalPostsCount","profileSlice","onProfile","onProfilePosts","onProfileRemove","onProfilePostsLiked","onProfilePostsAdd","onProfilePostsDelete","onProfileUpdate","forEach","onProfileFollowAdd","meId","profileId","onProfileFollowDelete","onProfilePostsCommentAdd","onProfilePostsCommentDelete"],"sourceRoot":""}